#include <string>
#include <algorithm> // For std::max

bool isVowel(char x) {
    return (x == 'a' || x == 'i' || x == 'e' || x == 'o' || x == 'u');
}

class Solution {
public:
    int maxVowels(std::string s, int k) {
        int current_vowel_count = 0;

        // 1. Calculate vowels for the first window of size k.
        for (int i = 0; i < k; i++) {
            if (isVowel(s[i])) {
                current_vowel_count++;
            }
        }

        int max_vowel_count = current_vowel_count;

        // 2. Slide the window from the k-th character to the end.
        for (int i = k; i < s.length(); i++) {
            // Subtract the character leaving the window.
            if (isVowel(s[i - k])) {
                current_vowel_count--;
            }
            // Add the new character entering the window.
            if (isVowel(s[i])) {
                current_vowel_count++;
            }
            // 3. Update the maximum.
            max_vowel_count = max(max_vowel_count, current_vowel_count);
        }

        return max_vowel_count;
    }
};
